PHILOOOOOOOOOOOOOOOOOO




philo is in classic concurrency problem in CS that is designed to manage synchronization issuses
when multiple processes (THREDS) are shared the resources


TREADS
In many cases, a thread is a component of a process
ina thread is in comprises of a thread id a program counter a register set and stack

we creat in mutex with this data type  (pthread_mutex_t) depend on the system and the implementation of pthread
it holds metadata needed to control thread access.


What Does pthread_mutex_t Contain?
Internally, the pthread_mutex_t structure typically contains:

Lock state â†’ Whether the mutex is currently locked or unlocked.
Owner thread ID â†’ Which thread currently holds the lock.
Queue of waiting threads â†’ If multiple threads try to lock a mutex, they are put in a queue.
Mutex type â†’ Whether itâ€™s normal, recursive, or error-checking.
Other flags â†’ Implementation-specific details like priority settings.
ðŸ’¡ Important: The exact internal structure is hidden in most implementations, meaning you cannot directly access its members.




each philosopher is a separate thread.
Instead of making one philosopher wait for another, each philosopher runs in parallel.
They all check fork availability at the same time.
This simulates real concurrency where multiple philosophers (threads) think and eat at the same time.



why are this eq are the case
		info->philos[i].left_fork = &info->forks[(i + 1) % info->nbr_philos];
fo example we have in 4 philosofers
with the id 
[   1    ,   2     ,      3     ,   4    ]  and also in 4  forks
    |        |            |         |
[   1    ,   2     ,      3     ,   4    ]
in this case the right  representation is 
so the right hand is (for the first philo) is the fork 1
and the left 






------ THE LOGIC --------

| Condition     | Logic                                                          |
| ------------- | -------------------------------------------------------------- |
| **Death**     | `if (now - last_meal > time_to_die)`                           |
| **Eating**    | Happens only after picking up **both forks**                   |
| **Sleeping**  | After eating, must `usleep(time_to_sleep)`                     |
| **Thinking**  | Happens between sleeping and trying to take forks              |
| **Loop Stop** | Either someone **died** or all have **eaten `must_eat` times** |







les operation atomic


data race := rece Condition

TOCTOU


https://www.codequoi.com/threads-mutex-et-programmation-concurrente-en-c/






the semaphore